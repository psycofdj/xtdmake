#!/usr/bin/env python

import sys
import os
import json
import argparse
import copy
import datetime
import random

l_parser = argparse.ArgumentParser()
l_parser.add_argument("--report-dir",   action="store", help ="path to xtdmake reports",   required=True)
l_parser.add_argument("--history-dir",  action="store", help ="path to history output",    required=True)
l_parser.add_argument("--output-dir",   action="store", help ="path to javascript output", required=True)
l_parser.add_argument("--build-label",  action="store", help ="name of current build",     required=True)
l_parser.add_argument("--max-items",    action="store", help ="maximum number of build to keep in graph", type=int, default="75")
l_parser.add_argument("--random",       action="store_true", help ="internal use",         default=False)
l_result = l_parser.parse_args()

l_graphDefs = {}
l_graphs    = {}
l_values    = {}

for c_root, c_dirs, c_files in os.walk(l_result.report_dir):
  for c_file in c_files:
    if c_file == "status.json":
      l_file = open(os.path.join(c_root, c_file), "r")
      l_content = l_file.read()
      l_data = json.loads(l_content)
      l_module=l_data["module"]
      l_kpi=l_data["kpi"]
      if not len(l_data["graphs"]):
        continue
      if not l_kpi in l_values:
        l_values[l_kpi] = {}
      if not l_kpi in l_graphs:
        l_graphs[l_kpi] = {}
      l_graphDefs[l_kpi]        = l_data["graphs"]
      l_values[l_kpi][l_module] = l_data["data"]

for c_kpi in l_values:
  l_data = {}
  for c_module in l_values[c_kpi]:
    for c_data in l_values[c_kpi][c_module]:
      l_value = l_values[c_kpi][c_module][c_data]
      if type(l_value) in [ str, unicode ]:
        l_data[c_data] = l_value
      else:
        if not c_data in l_data:
          l_data[c_data] = 0
        l_data[c_data] += l_value
  l_values[c_kpi]["Total"] = l_data

l_date = datetime.datetime.today().strftime("%d/%m/%Y")
for c_kpi in l_values:
  for c_module in l_values[c_kpi]:
    l_graphs[c_kpi][c_module] = []
    for c_graph in l_graphDefs[c_kpi]:
      l_graph = copy.deepcopy(c_graph)
      try:
        l_graph["options"]["title"]["text"] = l_graph["options"]["title"]["text"] % {
          "module" : c_module
        }
      except KeyError:
        pass
      for c_serie in l_graph["data"]["datasets"]:
        l_val = c_serie["data"] % l_values[c_kpi][c_module]
        l_val = eval(l_val)
        if l_result.random:
          l_rand = (random.random() / 2.0) - 0.25
          l_val  = l_val * (1 + l_rand);
          l_val  = max(l_val, 0);
          if "percent" in c_serie["yAxisID"]:
            l_val = min(l_val, 100)
          l_val = int(l_val)
        c_serie["data"]  = [ l_val ]
      l_graph["data"]["labels"] = [ [ l_date, l_result.build_label ] ]
      l_graphs[c_kpi][c_module].append(l_graph)

for c_kpi in l_values:
  for c_module in l_values[c_kpi]:
    l_name  = os.path.join(l_result.history_dir, "%s_%s" % (c_module, c_kpi))
    l_json  = "%s.json" % l_name
    l_graph = l_graphs[c_kpi][c_module]
    if os.path.exists(l_json):
      with open(l_json, "r") as l_file:
        l_content = l_file.read()
        l_data    = json.loads(l_content)
        for c_graphIdx, c_graph in enumerate(l_data):
          l_graph[c_graphIdx]["data"]["labels"] = c_graph["data"]["labels"] + l_graph[c_graphIdx]["data"]["labels"]
          l_graph[c_graphIdx]["data"]["labels"] = l_graph[c_graphIdx]["data"]["labels"][-l_result.max_items:]
          for c_idx, c_obj in enumerate(c_graph["data"]["datasets"]):
            l_graph[c_graphIdx]["data"]["datasets"][c_idx]["data"] = c_obj["data"]   + l_graph[c_graphIdx]["data"]["datasets"][c_idx]["data"]
            l_graph[c_graphIdx]["data"]["datasets"][c_idx]["data"] = l_graph[c_graphIdx]["data"]["datasets"][c_idx]["data"][-l_result.max_items:]
    with open(l_json, "w") as l_file:
      l_file.write(json.dumps(l_graph))

l_jsPath = os.path.join(l_result.output_dir, "graph.js")
with open(l_jsPath, "w") as l_file:
  l_file.write("var graphs = " + json.dumps(l_graphs))
